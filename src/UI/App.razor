@using System.Text.Json
@using System
@using Azure.DataApiBuilder.Config
@using Azure.DataApiBuilder.Config.ObjectModel
@using UI.Shared.SharedClasses
@inject ILogger<App> Logger
@inject HttpClient Http

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <CascadingValue Value=MutableRuntimeConfig>
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        </CascadingValue>
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private RuntimeConfig? MutableRuntimeConfig { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync in App.razor");

        await GetParsedJson();
    }

    protected async Task GetParsedJson()
    {
        Logger.LogInformation("Making request to get JSON");
        string response = string.Empty;

        try
        {
            // First try to fetch local file.
            response = await Http.GetStringAsync("/dab-config.json");
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError($"Could not load configuration from file: {ex}");

            try
            {
                response = await Http.GetStringAsync("https://localhost:5001/configuration");
            }
            catch (Exception engineException)
            {
                Logger.LogError($"Exception retreiving configuration from Data API builder : {engineException}");
            }
        }

        if (!string.IsNullOrEmpty(response))
        {
            Logger.LogInformation(response);
            RuntimeConfig? runtimeConfig;

            if (RuntimeConfigLoader.TryParseConfig(response, out runtimeConfig))
            {
                //copy runtimeConfig into mutable config
                MutableRuntimeConfig = new(runtimeConfig);
            }
        }
        else
        {
            MutableRuntimeConfig = new(RuntimeConfig.DefaultRuntimeConfig);
        }
    }
}
